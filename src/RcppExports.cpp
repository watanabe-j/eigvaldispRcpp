// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Cov_r2A
arma::rowvec Cov_r2A(const arma::rowvec n, const arma::vec R, const arma::vec E, int nthreads);
RcppExport SEXP _eigvaldispRcpp_Cov_r2A(SEXP nSEXP, SEXP RSEXP, SEXP ESEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cov_r2A(n, R, E, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Cov_r2C
NumericVector Cov_r2C(NumericVector n, NumericVector R, NumericVector E, int dummy_nthreads);
RcppExport SEXP _eigvaldispRcpp_Cov_r2C(SEXP nSEXP, SEXP RSEXP, SEXP ESEXP, SEXP dummy_nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type dummy_nthreads(dummy_nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cov_r2C(n, R, E, dummy_nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Cov_r2E
Eigen::ArrayXd Cov_r2E(const Eigen::ArrayXd n, const Eigen::ArrayXd R, const Eigen::ArrayXd E, int nthreads);
RcppExport SEXP _eigvaldispRcpp_Cov_r2E(SEXP nSEXP, SEXP RSEXP, SEXP ESEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cov_r2E(n, R, E, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// Cov_r2P
NumericVector Cov_r2P(NumericVector n, NumericVector R, NumericVector E, int dummy_nthreads);
RcppExport SEXP _eigvaldispRcpp_Cov_r2P(SEXP nSEXP, SEXP RSEXP, SEXP ESEXP, SEXP dummy_nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type dummy_nthreads(dummy_nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cov_r2P(n, R, E, dummy_nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_eigvaldispRcpp_Cov_r2A", (DL_FUNC) &_eigvaldispRcpp_Cov_r2A, 4},
    {"_eigvaldispRcpp_Cov_r2C", (DL_FUNC) &_eigvaldispRcpp_Cov_r2C, 4},
    {"_eigvaldispRcpp_Cov_r2E", (DL_FUNC) &_eigvaldispRcpp_Cov_r2E, 4},
    {"_eigvaldispRcpp_Cov_r2P", (DL_FUNC) &_eigvaldispRcpp_Cov_r2P, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_eigvaldispRcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
